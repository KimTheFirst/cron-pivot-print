#!/usr/bin/php
<?php
# ┌───────────── minute (0 - 59)
# │ ┌───────────── hour (0 - 23)
# │ │ ┌───────────── day of month (1 - 31)
# │ │ │ ┌───────────── month (1 - 12)
# │ │ │ │ ┌───────────── day of week (0 - 6) (Sunday to Saturday)
# │ │ │ │ │
# │ │ │ │ │
# │ │ │ │ │
# * * * * *  command to execute
# https://en.wikipedia.org/wiki/Cron
#
# Usage:
#
# 1: "cronpivot" = Display default crontab for current user
# 2: "cronpivot /path/to/cronfile" = Display crontab from file
#
#
if(!isset($argv[1])){#If no argument is specified, try to get a crontab for the current user;
    $tablocation='/var/spool/cron/crontabs/'.get_current_user();
    if(!is_file($tablocation)){
        throw new Exception("Fatal error: No user crontab detected and no cron file specified. Unable to continue.");
    }
}else{

    if(!is_file($argv[1])){
        throw new Exception("Fatal error: If an argument is specified, it must refer to a file.");
    }
    $tablocation=$argv[1];
}

$file=fopen($tablocation,"r");
$crons=[];
$outlines=[];
if(!$file){
    throw new Exception("Unable to open file handle. Do I have read permissions?");
}

while(($line=fgets($file))){
$line=trim($line);
        if(empty($line)){
            continue;
        }
        $firstchar=substr($line,0,1);
	if( !ctype_digit(strval($firstchar)) && $firstchar !='*' ){
            continue;
        }
        $cron=preg_split('/[\s]+/', $line);
        if(count($cron)<6){
                continue;
        }
	$count=0;
	$cronout=[];
        foreach($cron as $c){
            if($count>5){
                $cronout[5].=' '.$c;#Last minute hack for when I remembered that commands can have spaces in them
            }else {
                $cronout[$count] = trim($c);
            }
            $count++;
        }
        $crons[]=$cronout;
}
fclose($file);
if(empty($crons)){
        throw new Exception("No usable cron commands detected. This script only works with 6 field cron files.");
}

$weekdays=['SUN','MON','TUE','WED','THU','FRI','SAT'];

#Function to convert weekdays to their numeric values
function weekify($val){
    $val=strtoupper($val);
    global $weekdays;
    foreach($weekdays as $k=>$v){
        $val=str_replace($v,$k,$val);
    }
    return $val;
}

$months=['JAN','FEB','MAR','APR','MAY','JUN','JUL','AUG','SEP','OCT','NOV','DEC'];
#Function to convert months to their numberic values
function monthify($val){
    $val=strtoupper($val);
    global $months;
    foreach($months as $k=>$v){
        $val=str_replace($v,$k+1,$val);
    }
    return $val;
}

function getList($cronval,$minrange,$maxrange){
$received="Cronval:$cronval, Minrange:$minrange, Maxrange:$maxrange";
        if(ctype_digit(strval($cronval))){# Parse step only format
                $minrange=(int)$minrange;
                $maxrange=(int)$maxrange;
                $step=(int)$cronval;
        }else if($cronval==='*'){# Parse Step only wildcard
                $minrange=(int)$minrange;
                $maxrange=(int)$maxrange;
                $step=1;
        }else if(strpos($cronval,'/')!==false){# Parse range / step format.
                $params=explode('/',$cronval);
                if($params[0]==='*'){
                            $minrange=(int)$minrange;
                            $maxrange=(int)$maxrange;
                }else if(strpos($params[0],'-')!==false){
                            $range=explode('-',$params[1]);
                            $minrange=(int)$range[0];
                            $maxrange=(int)$range[1];
                }
                if($params[1]==='*'){
                        $step=1;
                }else{
                        $step=(int)$params[1];
                }
        }else if(strpos($cronval, '-')!==false){# Parse range only format
            $params=explode('/',$cronval);
            $minrange=(int)$params[0];
            $maxrange=(int)$params[1];
            $step=1;
        }else if(strpos($cronval,',')!==false){# Someone has done the work for us. How nice.
                return $cronval;
        }
        if(!isset($step) || !isset($minrange) || !isset($maxrange) || !is_int($step) || !is_int($minrange) || !is_int($maxrange)){
            throw new Exception("Unable to parse crontab. Received $received");
        }
        $list=[];
        $cnt=$minrange;
	if($maxrange > 59){
		throw new Exception("Out of range: $maxrange");
	}
        while($cnt<=$maxrange){
		$list[]=$cnt;
		if($step===0){#If it's a zero then no work is needed.
			break;
		}
	        $cnt=$cnt+$step;
        }
        $list=implode(',',$list);
        return $list;
}
foreach($crons as $cron){
        $count=0;
        $outline=[];
        foreach($cron as $c){
                switch($count){
                        case 0: #Minute
                            $outline['Minute']=getList($c,0,59);
                        break;
                        case 1: #Hour
                            $outline['Hour']=getList($c,0,23);
                        break;
                        case 2: #Day of Month
                             $outline['Day of Month']=getList($c,1,31);
                        break;
                        case 3: #Month
                            $outline['Month']=getList(monthify($c),1,12);
                        break;
                        case 4: #Day of Week
                            $outline['Day of Week']=getList(weekify($c),0,6);
                        break;
                        case 5: #Command
                            $outline['Command']=$c;
                        break;
                        default: #Should never happen
                                throw new Exception("Probably developer error. Value: $c");
                        break;
                }
        $count++;
        }
        if(count($outline)===6){
                $outlines[]=$outline;
        }
}
foreach($outlines as $outline){
	    foreach($outline as $k=>$v){
		    echo $k.str_repeat(' ',20-strlen($k)).$v.PHP_EOL;
	    }
	    echo '_______________________________________________'.PHP_EOL.PHP_EOL;
}

echo 'Finished printing '.count($outline).' cron lines'.PHP_EOL;
